require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PolicyAreasController do

  # This should return the minimal set of attributes required to create a valid
  # PolicyArea. As you add validations to PolicyArea, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  let(:user) { FactoryGirl.create :user }

  describe "GET index" do
    it "assigns all policy_areas as @policy_areas" do
      policy_area = PolicyArea.create! valid_attributes
      get :index, {}
      assigns(:policy_areas).should eq([policy_area])
    end
  end

  describe "GET show" do
    it "assigns the requested policy_area as @policy_area" do
      policy_area = PolicyArea.create! valid_attributes
      get :show, {:id => policy_area.to_param}
      assigns(:policy_area).should eq(policy_area)
    end
  end

  describe "GET new" do
    context 'logged in' do
      it "assigns a new policy_area as @policy_area" do
        sign_in user
        get :new, {}
        response.should_not redirect_to(new_user_session_path)
        assigns(:policy_area).should be_a_new(PolicyArea)
      end
    end

    context 'logged out' do
      it "redirects to the login page" do
        get :new, {}
        response.should redirect_to(new_user_session_path)
      end
    end
  end

  describe "GET edit" do
    let(:policy_area) { PolicyArea.create! valid_attributes }

    context 'logged in' do
      it "assigns the requested policy_area as @policy_area" do
        sign_in user
        get :edit, {:id => policy_area.to_param}
        assigns(:policy_area).should eq(policy_area)
      end
    end

    context 'logged out' do
      it "redirects to the login page" do
        get :edit, {id: policy_area.to_param}
        response.should redirect_to(new_user_session_path)
      end
    end
  end

  describe "POST create" do
    context 'logged in' do
      before { sign_in user }

      describe "with valid params" do
        it "creates a new PolicyArea" do
          expect {
            post :create, {:policy_area => valid_attributes}
          }.to change(PolicyArea, :count).by(1)
        end

        it "assigns a newly created policy_area as @policy_area" do
          post :create, {:policy_area => valid_attributes}
          assigns(:policy_area).should be_a(PolicyArea)
          assigns(:policy_area).should be_persisted
        end

        it "redirects to the created policy_area" do
          post :create, {:policy_area => valid_attributes}
          response.should redirect_to(PolicyArea.last)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved policy_area as @policy_area" do
          # Trigger the behavior that occurs when invalid params are submitted
          PolicyArea.any_instance.stub(:save).and_return(false)
          post :create, {:policy_area => {}}
          assigns(:policy_area).should be_a_new(PolicyArea)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          PolicyArea.any_instance.stub(:save).and_return(false)
          post :create, {:policy_area => {}}
          response.should render_template("new")
        end
      end
    end

    context 'logged out' do
      it "redirects to the login page" do
        post :create, {policy_area: {}}
        response.should redirect_to(new_user_session_path)
      end
    end
  end

  describe "PUT update" do

    let(:policy_area) { PolicyArea.create! valid_attributes }
    context 'logged in' do
      before { sign_in user }
      describe "with valid params" do
        it "updates the requested policy_area" do
          # Assuming there are no other policy areas in the database, this
          # specifies that the PolicyArea created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          PolicyArea.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
          put :update, {:id => policy_area.to_param, :policy_area => {'these' => 'params'}}
        end

        it "assigns the requested policy_area as @policy_area" do
          put :update, {:id => policy_area.to_param, :policy_area => valid_attributes}
          assigns(:policy_area).should eq(policy_area)
        end

        it "redirects to the policy_area" do
          put :update, {:id => policy_area.to_param, :policy_area => valid_attributes}
          response.should redirect_to(policy_area)
        end
      end

      describe "with invalid params" do
        it "assigns the policy_area as @policy_area" do
          # Trigger the behavior that occurs when invalid params are submitted
          PolicyArea.any_instance.stub(:save).and_return(false)
          put :update, {:id => policy_area.to_param, :policy_area => {}}
          assigns(:policy_area).should eq(policy_area)
        end

        it "re-renders the 'edit' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          PolicyArea.any_instance.stub(:save).and_return(false)
          put :update, {:id => policy_area.to_param, :policy_area => {}}
          response.should render_template("edit")
        end
      end
    end

    context 'logged out' do
      it "redirects to the login page" do
        put :update, {:id => policy_area.to_param, :policy_area => {'these' => 'params'}}
        response.should redirect_to(new_user_session_path)
      end
    end
  end

  describe "DELETE destroy" do
    let!(:policy_area) { PolicyArea.create! valid_attributes }
    context 'logged in' do
      before { sign_in user }

      it "destroys the requested policy_area" do
        expect {
          delete :destroy, {:id => policy_area.to_param}
        }.to change(PolicyArea, :count).by(-1)
      end

      it "redirects to the policy areas list" do
        delete :destroy, {:id => policy_area.to_param}
        response.should redirect_to(policy_areas_url)
      end
    end

    context 'logged out' do
      it "redirects to the login page" do
        delete :destroy, {:id => policy_area.to_param}
        response.should redirect_to(new_user_session_path)
      end
    end
  end

end
